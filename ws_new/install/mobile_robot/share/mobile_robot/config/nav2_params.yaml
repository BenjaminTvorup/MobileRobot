nav2_controller:
  ros__parameters:
    # Update rate of the controller (Hz)
    controller_frequency: 20.0

    # Progress checker plugin
    progress_checker_plugin: "progress_checker"
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.1  # Minimum distance (m) the robot must move to be considered "making progress"
      movement_time_allowance: 10.0  # Time (s) allowed to make progress before considering the robot stuck

    # Goal checker plugin
    goal_checker_plugins: ["general_goal_checker"]
    general_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25  # Distance tolerance (m) to consider the goal reached
      yaw_goal_tolerance: 0.25  # Angular tolerance (rad) to consider the goal reached
      stateful: true  # Ensures the goal checker only triggers when the robot is within tolerance

    # Controller plugin
    controller_plugins: ["FollowPath"]
    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.5  # Desired linear velocity (m/s)
      max_linear_vel: 1.0  # Maximum linear velocity (m/s)
      min_linear_vel: 0.1  # Minimum linear velocity (m/s)
      max_angular_vel: 1.0  # Maximum angular velocity (rad/s)
      lookahead_dist: 0.6  # Lookahead distance (m) for path following
      min_lookahead_dist: 0.3  # Minimum lookahead distance (m)
      max_lookahead_dist: 1.0  # Maximum lookahead distance (m)
      lookahead_time: 1.5  # Time (s) to project the lookahead distance
      transform_tolerance: 0.2  # Tolerance (s) for transform timeouts
      use_velocity_scaled_lookahead_dist: false  # Whether to scale lookahead distance with velocity
      use_cost_regulated_linear_velocity_scaling: true  # Scale velocity based on costmap costs
      use_collision_detection: true  # Enable collision detection
      cost_scaling_dist: 0.5  # Distance (m) at which to start scaling velocity based on cost
      cost_scaling_gain: 1.0  # Gain for velocity scaling based on cost
      inflation_cost_scaling_factor: 3.0  # Factor for inflation layer in costmap
      max_allowed_time_to_collision: 1.0  # Maximum time (s) to collision before stopping
      use_rotate_to_heading: false  # Rotate to heading at the start (not suitable for Ackermann)
      allow_reversing: false  # Allow the robot to reverse (typically false for Ackermann)


# Local Costmap Configuration
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 3.0
      height: 3.0
      resolution: 0.05
      # Define the footprint as a polygon (list of [x, y] coordinates)
      footprint: "[[0.25, 0.2], [0.25, -0.2], [-0.25, -0.2], [-0.25, 0.2]]"
      # Optional: footprint_padding adds extra padding (in meters) to the footprint
      footprint_padding: 0.01
      plugins: ["voxel_layer", "inflation_layer"]
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: true
        # Add other voxel_layer parameters as needed
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55

# Global Costmap Configuration
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map  # Assumes you have a map frame (e.g., from SLAM or a static map)
      robot_base_frame: base_link
      resolution: 0.05
      # Define the same footprint as in local_costmap
      footprint: "[[0.25, 0.2], [0.25, -0.2], [-0.25, -0.2], [-0.25, 0.2]]"
      footprint_padding: 0.01
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_topic: "/map"
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        # Add obstacle_layer parameters as needed
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
  
  waypoint_follower:
  ros__parameters:
    plugin: "nav2_gps_waypoint_follower::GPSWaypointFollower"
    loop_rate: 10.0
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      wait_timeout: 5.0 